{
  "\"use client\";\n\nimport { useTranslation, useLanguageSwitcher } from \"i18nexus\";\n\nexport default function HomePage() {\n  const { t } = useTranslation();\n  const { currentLanguage, changeLanguage, availableLanguages } =\n    useLanguageSwitcher();\n\n  return (\n    <div>\n      <h1>{t(\"환영합니다\")}</h1>\n      \n      <select\n        value={currentLanguage}\n        onChange={(e) => changeLanguage(e.target.value)}\n      >\n        {availableLanguages.map((lang) => (\n          <option key={lang.code} value={lang.code}>\n            {lang.flag} {lang.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}": "\"use client\";\n\nimport { useTranslation, useLanguageSwitcher } from \"i18nexus\";\n\nexport default function HomePage() {\n  const { t } = useTranslation();\n  const { currentLanguage, changeLanguage, availableLanguages } =\n    useLanguageSwitcher();\n\n  return (\n    <div>\n      <h1>{t(\"환영합니다\")}</h1>\n      \n      <select\n        value={currentLanguage}\n        onChange={(e) => changeLanguage(e.target.value)}\n      >\n        {availableLanguages.map((lang) => (\n          <option key={lang.code} value={lang.code}>\n            {lang.flag} {lang.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}",
  "\"use client\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { translations } from \"./i18n\";\n\n// i18next 초기화 (클라이언트 전용)\nif (typeof window !== \"undefined\" && !i18n.isInitialized) {\n  i18n.use(initReactI18next).init({\n    resources: {\n      ko: { translation: translations.ko },\n      en: { translation: translations.en },\n    },\n    lng: \"ko\",\n    fallbackLng: \"ko\",\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n}\n\nexport default i18n;": "\"use client\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { translations } from \"./i18n\";\n\n// i18next 초기화 (클라이언트 전용)\nif (typeof window !== \"undefined\" && !i18n.isInitialized) {\n  i18n.use(initReactI18next).init({\n    resources: {\n      ko: { translation: translations.ko },\n      en: { translation: translations.en },\n    },\n    lng: \"ko\",\n    fallbackLng: \"ko\",\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n}\n\nexport default i18n;",
  "\"use client\";\nimport { I18nProvider } from \"i18nexus\";\nimport { ReactNode } from \"react\";\nimport \"@/lib/i18n.client\"; // 클라이언트 전용 i18next 초기화\n\nexport default function ClientProvider({ \n  children \n}: { \n  children: ReactNode \n}) {\n  return (\n    <I18nProvider\n      languageManagerOptions={{\n        defaultLanguage: \"ko\",\n        availableLanguages: [\n          { code: \"ko\", name: \"한국어\", flag: \"🇰🇷\" },\n          { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n        ],\n        enableAutoDetection: false, // Hydration 에러 방지\n      }}>\n      {children}\n    </I18nProvider>\n  );\n}": "\"use client\";\nimport { I18nProvider } from \"i18nexus\";\nimport { ReactNode } from \"react\";\nimport \"@/lib/i18n.client\"; // 클라이언트 전용 i18next 초기화\n\nexport default function ClientProvider({ \n  children \n}: { \n  children: ReactNode \n}) {\n  return (\n    <I18nProvider\n      languageManagerOptions={{\n        defaultLanguage: \"ko\",\n        availableLanguages: [\n          { code: \"ko\", name: \"한국어\", flag: \"🇰🇷\" },\n          { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n        ],\n        enableAutoDetection: false, // Hydration 에러 방지\n      }}>\n      {children}\n    </I18nProvider>\n  );\n}",
  "\"use client\";\nimport { useTranslation } from \"i18nexus\";\n\nfunction Welcome() {\n  const { t } = useTranslation();\n  \n  return (\n    <div>\n      <h1>{t(\"환영합니다\")}</h1>\n      <p>{t(\"i18nexus를 사용해주셔서 감사합니다\")}</p>\n      <button>{t(\"시작하기\")}</button>\n    </div>\n  );\n}": "\"use client\";\nimport { useTranslation } from \"i18nexus\";\n\nfunction Welcome() {\n  const { t } = useTranslation();\n  \n  return (\n    <div>\n      <h1>{t(\"환영합니다\")}</h1>\n      <p>{t(\"i18nexus를 사용해주셔서 감사합니다\")}</p>\n      <button>{t(\"시작하기\")}</button>\n    </div>\n  );\n}",
  "# 번역 키 삭제\nnpx i18nexus delete-string namespace:key\n\n# 또는 별칭 사용\nnpx i18nexus d namespace:key": "# 번역 키 삭제\nnpx i18nexus delete-string namespace:key\n\n# 또는 별칭 사용\nnpx i18nexus d namespace:key",
  "# 번역 키 수정\nnpx i18nexus update-string namespace:key\n\n# 또는 별칭 사용\nnpx i18nexus u namespace:key": "# 번역 키 수정\nnpx i18nexus update-string namespace:key\n\n# 또는 별칭 사용\nnpx i18nexus u namespace:key",
  "# 새 번역 키 추가\nnpx i18nexus add-string\n\n# 또는 별칭 사용\nnpx i18nexus a": "# 새 번역 키 추가\nnpx i18nexus add-string\n\n# 또는 별칭 사용\nnpx i18nexus a",
  "// app/layout.tsx\nimport { I18nProvider } from \"i18nexus\";\nimport { cookies } from \"next/headers\";\n\nexport default function RootLayout({ children }) {\n  const language = cookies().get(\"i18n-language\")?.value || \"ko\";\n\n  return (\n    <html lang={language}>\n      <body>\n        <I18nProvider\n          initialLanguage={language}\n          translations={{\n            ko: { \"환영합니다\": \"환영합니다\" },\n            en: { \"환영합니다\": \"Welcome\" }\n          }}\n        >\n          {children}\n        </I18nProvider>\n      </body>\n    </html>\n  );\n}": "// app/layout.tsx\nimport { I18nProvider } from \"i18nexus\";\nimport { cookies } from \"next/headers\";\n\nexport default function RootLayout({ children }) {\n  const language = cookies().get(\"i18n-language\")?.value || \"ko\";\n\n  return (\n    <html lang={language}>\n      <body>\n        <I18nProvider\n          initialLanguage={language}\n          translations={{\n            ko: { \"환영합니다\": \"환영합니다\" },\n            en: { \"환영합니다\": \"Welcome\" }\n          }}\n        >\n          {children}\n        </I18nProvider>\n      </body>\n    </html>\n  );\n}",
  "1. Install Packages": "1. Install Packages",
  "1. Server Layout (app/layout.tsx)": "1. Server Layout (app/layout.tsx)",
  "1. 설치": "1. 설치",
  "2. Client Component (app/page.tsx)": "2. Client Component (app/page.tsx)",
  "2. Wrap Korean Text (Optional)": "2. Wrap Korean Text (Optional)",
  "2. 번역 파일 설정 (권장)": "2. 번역 파일 설정 (권장)",
  "3. Provider 설정": "3. Provider 설정",
  "3. Setup Provider (Required)": "3. Setup Provider (Required)",
  "4. 컴포넌트에서 사용하기": "4. 컴포넌트에서 사용하기",
  "5. i18nexus-cli 도구 (선택사항)": "5. i18nexus-cli 도구 (선택사항)",
  "<h1>{t(\"환영합니다\")}</h1>": "<h1>{t(\"환영합니다\")}</h1>",
  "API Reference": "API Reference",
  "Adds only new keys found in your code": "Adds only new keys found in your code",
  "After": "After",
  "Automate your i18n workflow with powerful command-line tools": "Automate your i18n workflow with powerful command-line tools",
  "Automatic text wrapping with CLI": "Automatic text wrapping with CLI",
  "Automatically saves and restores user language preference": "Automatically saves and restores user language preference",
  "Automatically sorts keys alphabetically": "Automatically sorts keys alphabetically",
  "Automatically wraps Korean text with t() functions and adds useTranslation imports": "Automatically wraps Korean text with t() functions and adds useTranslation imports",
  "Basic Setup": "Basic Setup",
  "Basic Usage": "Basic Usage",
  "Before": "Before",
  "Before & After Example": "Before & After Example",
  "CLI Tools Guide": "CLI Tools Guide",
  "CLI 도구": "CLI 도구",
  "Client Components": "Client Components",
  "Collaborate with translators by syncing translations with Google Sheets": "Collaborate with translators by syncing translations with Google Sheets",
  "Complete Workflow": "Complete Workflow",
  "Complex setup and configuration": "Complex setup and configuration",
  "Cookie-based Language Persistence": "Cookie-based Language Persistence",
  "Correct language on first render prevents layout shift": "Correct language on first render prevents layout shift",
  "Create Service Account credentials": "Create Service Account credentials",
  "Create a Google Cloud project": "Create a Google Cloud project",
  "Current Language": "Current Language",
  "Deploy": "Deploy",
  "Download JSON credentials file": "Download JSON credentials file",
  "Download Translated Content (Optional)": "Download Translated Content (Optional)",
  "Download Translations": "Download Translations",
  "Enable Google Sheets API": "Enable Google Sheets API",
  "Extract Translation Keys": "Extract Translation Keys",
  "Extract translation keys from your code and automatically merge with existing translations": "Extract translation keys from your code and automatically merge with existing translations",
  "Extract translation keys from your code and generate translation files": "Extract translation keys from your code and generate translation files",
  "From Installation to Advanced Usage": "From Installation to Advanced Usage",
  "Full SSR Support": "Full SSR Support",
  "Full type safety and autocomplete": "Full type safety and autocomplete",
  "Generate translation files from your wrapped text": "Generate translation files from your wrapped text",
  "Generated Files": "Generated Files",
  "Generated Output (JSON)": "Generated Output (JSON)",
  "Google Sheets Integration": "Google Sheets Integration",
  "Google Sheets integration": "Google Sheets integration",
  "Hook for accessing the translation function in client components": "Hook for accessing the translation function in client components",
  "Hook for managing language switching and accessing language state": "Hook for managing language switching and accessing language state",
  "Hydration mismatch in SSR": "Hydration mismatch in SSR",
  "I18nProvider Guide": "I18nProvider Guide",
  "Installation": "Installation",
  "Key Features": "Key Features",
  "Language Switcher": "Language Switcher",
  "Live Demo": "Live Demo",
  "Manual text wrapping with t()": "Manual text wrapping with t()",
  "Manual translation file management": "Manual translation file management",
  "Next.js App Router에서는 layout.tsx가\n                서버 컴포넌트입니다. I18nProvider는 클라이언트 컴포넌트이므로\n                별도의 ClientProvider로 감싸야 합니다.": "Next.js App Router에서는 layout.tsx가\n                서버 컴포넌트입니다. I18nProvider는 클라이언트 컴포넌트이므로\n                별도의 ClientProvider로 감싸야 합니다.",
  "Output Example": "Output Example",
  "Perfect compatibility with Next.js server-side rendering": "Perfect compatibility with Next.js server-side rendering",
  "Preserves all existing translations": "Preserves all existing translations",
  "Pro Tip": "Pro Tip",
  "Provider Guide": "Provider Guide",
  "Pull completed translations back to your project": "Pull completed translations back to your project",
  "Quick Start": "Quick Start",
  "React Context provider for cookie-based language management and SSR support": "React Context provider for cookie-based language management and SSR support",
  "Recommended Project Structure": "Recommended Project Structure",
  "Server Components": "Server Components",
  "Setup Required": "Setup Required",
  "Share with translators via Google Sheets": "Share with translators via Google Sheets",
  "Share your Google Sheet with the service account email": "Share your Google Sheet with the service account email",
  "Shows detailed statistics of changes": "Shows detailed statistics of changes",
  "Simple setup with sensible defaults": "Simple setup with sensible defaults",
  "Smart Merging": "Smart Merging",
  "Store translations in lib/translations/ directory as JSON files": "Store translations in lib/translations/ directory as JSON files",
  "The extractor intelligently merges with existing translations:": "The extractor intelligently merges with existing translations:",
  "The wrapper intelligently detects Korean text and skips already wrapped text, imports, and object keys": "The wrapper intelligently detects Korean text and skips already wrapped text, imports, and object keys",
  "This demo follows the recommended Next.js App Router structure with i18nexus:": "This demo follows the recommended Next.js App Router structure with i18nexus:",
  "Traditional i18n Problems": "Traditional i18n Problems",
  "Translation Examples": "Translation Examples",
  "Translation Files": "Translation Files",
  "TypeScript Support": "TypeScript Support",
  "Upload Translations": "Upload Translations",
  "Upload to Google Sheets (Optional)": "Upload to Google Sheets (Optional)",
  "Use \"use client\" with useTranslation() hook for reactive translations": "Use \"use client\" with useTranslation() hook for reactive translations",
  "Use i18n-wrapper to automatically wrap hardcoded Korean strings": "Use i18n-wrapper to automatically wrap hardcoded Korean strings",
  "Use layout.tsx for I18nProvider with cookie-based language detection": "Use layout.tsx for I18nProvider with cookie-based language detection",
  "Why i18nexus?": "Why i18nexus?",
  "Wrap Korean Text": "Wrap Korean Text",
  "You need to set up Google Service Account credentials:": "You need to set up Google Service Account credentials:",
  "Your app is now fully internationalized!": "Your app is now fully internationalized!",
  "Zero Hydration Mismatch": "Zero Hydration Mismatch",
  "Zero hydration issues with SSR": "Zero hydration issues with SSR",
  "const { t } = useTranslation();\n\n// Usage\nt(\"key\")           // Simple translation\nt(\"한국어 텍스트\")  // Korean text as key": "const { t } = useTranslation();\n\n// Usage\nt(\"key\")           // Simple translation\nt(\"한국어 텍스트\")  // Korean text as key",
  "export class LanguageManager {\n  private currentLanguage: string;\n  \n  constructor(options: LanguageManagerOptions) {\n    this.currentLanguage = options.defaultLanguage || 'ko';\n    this.initialize();\n  }\n  \n  async setLanguage(lang: string): Promise<void> {\n    if (!this.isValidLanguage(lang)) {\n      throw new Error(`지원하지 않는 언어: ${lang}`);\n    }\n    \n    this.currentLanguage = lang;\n    await this.saveLanguageToCookie(lang);\n  }\n  \n  private async saveLanguageToCookie(lang: string): Promise<void> {\n    setCookie('i18nexus-language', lang, {\n      expires: 365,\n      path: '/',\n      sameSite: 'lax',\n    });\n  }\n}": "export class LanguageManager {\n  private currentLanguage: string;\n  \n  constructor(options: LanguageManagerOptions) {\n    this.currentLanguage = options.defaultLanguage || 'ko';\n    this.initialize();\n  }\n  \n  async setLanguage(lang: string): Promise<void> {\n    if (!this.isValidLanguage(lang)) {\n      throw new Error(`지원하지 않는 언어: ${lang}`);\n    }\n    \n    this.currentLanguage = lang;\n    await this.saveLanguageToCookie(lang);\n  }\n  \n  private async saveLanguageToCookie(lang: string): Promise<void> {\n    setCookie('i18nexus-language', lang, {\n      expires: 365,\n      path: '/',\n      sameSite: 'lax',\n    });\n  }\n}",
  "export const I18nProvider: React.FC<I18nProviderProps> = ({\n  children,\n  languageManagerOptions,\n  translations = {},\n  onLanguageChange,\n}) => {\n  // 상태 관리\n  const [languageManager] = useState(\n    () => new LanguageManager(languageManagerOptions)\n  );\n  const [currentLanguage, setCurrentLanguage] = useState<string>(\n    languageManagerOptions?.defaultLanguage || \"ko\"\n  );\n  \n  // Context 값 구성\n  const contextValue: I18nContextType = {\n    currentLanguage,\n    changeLanguage,\n    availableLanguages: languageManager.getAvailableLanguages(),\n    translations,\n  };\n  \n  return (\n    <I18nContext.Provider value={contextValue}>\n      {children}\n    </I18nContext.Provider>\n  );\n};": "export const I18nProvider: React.FC<I18nProviderProps> = ({\n  children,\n  languageManagerOptions,\n  translations = {},\n  onLanguageChange,\n}) => {\n  // 상태 관리\n  const [languageManager] = useState(\n    () => new LanguageManager(languageManagerOptions)\n  );\n  const [currentLanguage, setCurrentLanguage] = useState<string>(\n    languageManagerOptions?.defaultLanguage || \"ko\"\n  );\n  \n  // Context 값 구성\n  const contextValue: I18nContextType = {\n    currentLanguage,\n    changeLanguage,\n    availableLanguages: languageManager.getAvailableLanguages(),\n    translations,\n  };\n  \n  return (\n    <I18nContext.Provider value={contextValue}>\n      {children}\n    </I18nContext.Provider>\n  );\n};",
  "export default function Welcome() {\n  return (\n    <div>\n      <h1>환영합니다</h1>\n      <p>i18nexus 사용법</p>\n    </div>\n  );\n}": "export default function Welcome() {\n  return (\n    <div>\n      <h1>환영합니다</h1>\n      <p>i18nexus 사용법</p>\n    </div>\n  );\n}",
  "i18nexus Complete Guide": "i18nexus Complete Guide",
  "i18nexus Solutions": "i18nexus Solutions",
  "i18nexus 소개": "i18nexus 소개",
  "i18nexus 완전 가이드": "i18nexus 완전 가이드",
  "i18nexus-cli는 구글 시트 연동과 번역\n                  관리에 중점을 둔 도구입니다. 코드 내에서 `t()` 함수를 사용하여\n                  한국어 키로 번역을 호출하고, CLI로 번역 데이터를 관리하는\n                  방식입니다.": "i18nexus-cli는 구글 시트 연동과 번역\n                  관리에 중점을 둔 도구입니다. 코드 내에서 `t()` 함수를 사용하여\n                  한국어 키로 번역을 호출하고, CLI로 번역 데이터를 관리하는\n                  방식입니다.",
  "i18nexus란?": "i18nexus란?",
  "i18nexus를 강력하고 사용하기 쉽게 만드는 세 가지 핵심 구성 요소를 이해하세요.": "i18nexus를 강력하고 사용하기 쉽게 만드는 세 가지 핵심 구성 요소를 이해하세요.",
  "i18nexus를 프로젝트에 통합하고 사용하는 방법을 단계별로 알아보세요.": "i18nexus를 프로젝트에 통합하고 사용하는 방법을 단계별로 알아보세요.",
  "i18nexus에 대해 알아보고 React 국제화를 위한 완벽한 솔루션인 이유를 확인하세요.": "i18nexus에 대해 알아보고 React 국제화를 위한 완벽한 솔루션인 이유를 확인하세요.",
  "import en from \"./translations/en.json\";\nimport ko from \"./translations/ko.json\";\n\n// 번역 데이터만 export (서버에서도 안전)\nexport const translations = { ko, en };": "import en from \"./translations/en.json\";\nimport ko from \"./translations/ko.json\";\n\n// 번역 데이터만 export (서버에서도 안전)\nexport const translations = { ko, en };",
  "import { I18nProvider } from \"i18nexus\";\nimport { cookies } from \"next/headers\";\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Read language from cookie\n  const cookieStore = cookies();\n  const language = cookieStore.get(\"i18n-language\")?.value || \"ko\";\n\n  return (\n    <html lang={language}>\n      <body>\n        <I18nProvider\n          initialLanguage={language}\n          languageManagerOptions={{\n            defaultLanguage: \"ko\",\n            availableLanguages: [\n              { code: \"ko\", name: \"한국어\", flag: \"🇰🇷\" },\n              { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n            ],\n          }}\n          translations={{\n            ko: { \"환영합니다\": \"환영합니다\" },\n            en: { \"환영합니다\": \"Welcome\" },\n          }}\n        >\n          {children}\n        </I18nProvider>\n      </body>\n    </html>\n  );\n}": "import { I18nProvider } from \"i18nexus\";\nimport { cookies } from \"next/headers\";\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Read language from cookie\n  const cookieStore = cookies();\n  const language = cookieStore.get(\"i18n-language\")?.value || \"ko\";\n\n  return (\n    <html lang={language}>\n      <body>\n        <I18nProvider\n          initialLanguage={language}\n          languageManagerOptions={{\n            defaultLanguage: \"ko\",\n            availableLanguages: [\n              { code: \"ko\", name: \"한국어\", flag: \"🇰🇷\" },\n              { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n            ],\n          }}\n          translations={{\n            ko: { \"환영합니다\": \"환영합니다\" },\n            en: { \"환영합니다\": \"Welcome\" },\n          }}\n        >\n          {children}\n        </I18nProvider>\n      </body>\n    </html>\n  );\n}",
  "import { useTranslation } from \"i18nexus\";\n\nexport default function Welcome() {\n  const { t } = useTranslation();\n  return (\n    <div>\n      <h1>{t(\"환영합니다\")}</h1>\n      <p>{t(\"i18nexus 사용법\")}</p>\n    </div>\n  );\n}": "import { useTranslation } from \"i18nexus\";\n\nexport default function Welcome() {\n  const { t } = useTranslation();\n  return (\n    <div>\n      <h1>{t(\"환영합니다\")}</h1>\n      <p>{t(\"i18nexus 사용법\")}</p>\n    </div>\n  );\n}",
  "lib/\n  ├── translations/\n  │   ├── ko.json     # 한국어 번역\n  │   └── en.json     # 영어 번역\n  ├── i18n.ts         # 번역 데이터 export (서버 안전)\n  └── i18n.client.ts  # i18next 초기화 (클라이언트 전용)": "lib/\n  ├── translations/\n  │   ├── ko.json     # 한국어 번역\n  │   └── en.json     # 영어 번역\n  ├── i18n.ts         # 번역 데이터 export (서버 안전)\n  └── i18n.client.ts  # i18next 초기화 (클라이언트 전용)",
  "lib/i18n.client.ts (클라이언트 전용)": "lib/i18n.client.ts (클라이언트 전용)",
  "lib/i18n.ts (서버/클라이언트 공통)": "lib/i18n.ts (서버/클라이언트 공통)",
  "lib/translations/ko.json과 en.json 파일에 번역 키 추가": "lib/translations/ko.json과 en.json 파일에 번역 키 추가",
  "npm install -D i18nexus-cli\n# 또는\nyarn add -D i18nexus-cli": "npm install -D i18nexus-cli\n# 또는\nyarn add -D i18nexus-cli",
  "npm install i18nexus i18next react-i18next\n# 또는\nyarn add i18nexus i18next react-i18next": "npm install i18nexus i18next react-i18next\n# 또는\nyarn add i18nexus i18next react-i18next",
  "t(\"환영합니다\")": "t(\"환영합니다\")",
  "{\n  \"Quick Start\": \"Quick Start\",\n  \"Why i18nexus?\": \"Why i18nexus?\",\n  \"환영합니다\": \"Welcome\"\n}": "{\n  \"Quick Start\": \"Quick Start\",\n  \"Why i18nexus?\": \"Why i18nexus?\",\n  \"환영합니다\": \"Welcome\"\n}",
  "{\n  \"Quick Start\": \"빠른 시작\",\n  \"Why i18nexus?\": \"왜 i18nexus인가?\",\n  \"환영합니다\": \"환영합니다\"\n}": "{\n  \"Quick Start\": \"빠른 시작\",\n  \"Why i18nexus?\": \"왜 i18nexus인가?\",\n  \"환영합니다\": \"환영합니다\"\n}",
  "{\n  \"환영합니다\": \"Welcome\",\n  \"i18nexus를 사용해주셔서 감사합니다\": \"Thank you for using i18nexus\",\n  \"시작하기\": \"Get Started\"\n}": "{\n  \"환영합니다\": \"Welcome\",\n  \"i18nexus를 사용해주셔서 감사합니다\": \"Thank you for using i18nexus\",\n  \"시작하기\": \"Get Started\"\n}",
  "{\n  \"환영합니다\": \"환영합니다\",\n  \"i18nexus를 사용해주셔서 감사합니다\": \"i18nexus를 사용해주셔서 감사합니다\",\n  \"시작하기\": \"시작하기\"\n}": "{\n  \"환영합니다\": \"환영합니다\",\n  \"i18nexus를 사용해주셔서 감사합니다\": \"i18nexus를 사용해주셔서 감사합니다\",\n  \"시작하기\": \"시작하기\"\n}",
  "{ \"환영합니다\": \"환영합니다\" }": "{ \"환영합니다\": \"환영합니다\" }",
  "• React 18 동시성 지원": "• React 18 동시성 지원",
  "• add-string - 문자열 추가": "• add-string - 문자열 추가",
  "• import - JSON 가져오기": "• import - JSON 가져오기",
  "• listen - 실시간 업데이트": "• listen - 실시간 업데이트",
  "• pull - 번역 다운로드": "• pull - 번역 다운로드",
  "• 강력한 TypeScript 지원": "• 강력한 TypeScript 지원",
  "• 구글 시트 자동 동기화": "• 구글 시트 자동 동기화",
  "• 다양한 스토리지 백엔드": "• 다양한 스토리지 백엔드",
  "• 메모이제이션 활용": "• 메모이제이션 활용",
  "• 번역 키 자동 추출": "• 번역 키 자동 추출",
  "• 상세한 에러 메시지": "• 상세한 에러 메시지",
  "• 실시간 업데이트": "• 실시간 업데이트",
  "• 지연 로딩 지원": "• 지연 로딩 지원",
  "• 직관적이고 예측 가능한 API": "• 직관적이고 예측 가능한 API",
  "• 최적화된 상태 관리": "• 최적화된 상태 관리",
  "• 커스텀 번역 로더": "• 커스텀 번역 로더",
  "• 커스텀 포맷터": "• 커스텀 포맷터",
  "• 포괄적인 문서화": "• 포괄적인 문서화",
  "• 플러그인 시스템": "• 플러그인 시스템",
  "• 하드코딩된 문자열 자동 래핑": "• 하드코딩된 문자열 자동 래핑",
  "⚙️ 설정 파일 (i18nexus.config.js)": "⚙️ 설정 파일 (i18nexus.config.js)",
  "개발 도구들 (코드 변환, 추출, 구글 시트 연동)": "개발 도구들 (코드 변환, 추출, 구글 시트 연동)",
  "개발자 경험 최우선": "개발자 경험 최우선",
  "구글 시트 업로드": "구글 시트 업로드",
  "구글 시트에서 가져오기": "구글 시트에서 가져오기",
  "구글 시트에서 팀원들과 협업하여 번역 진행": "구글 시트에서 팀원들과 협업하여 번역 진행",
  "구글 시트의 번역 데이터를 로컬 JSON 파일로 다운로드합니다.": "구글 시트의 번역 데이터를 로컬 JSON 파일로 다운로드합니다.",
  "구글 시트의 변경사항을 실시간으로 감지하고 자동\n                    다운로드합니다.": "구글 시트의 변경사항을 실시간으로 감지하고 자동\n                    다운로드합니다.",
  "권장하는 방식:": "권장하는 방식:",
  "기존 번역 문자열을 수정합니다.": "기존 번역 문자열을 수정합니다.",
  "대화형:": "대화형:",
  "동기화": "동기화",
  "동작 원리": "동작 원리",
  "로 번역 데이터 다운로드": "로 번역 데이터 다운로드",
  "로 번역 데이터 업로드": "로 번역 데이터 업로드",
  "로컬 JSON 번역 파일을 구글 시트로 업로드합니다.": "로컬 JSON 번역 파일을 구글 시트로 업로드합니다.",
  "로컬 파일 업로드": "로컬 파일 업로드",
  "명령어 실행 시 네임스페이스,\n                      키, 기본 텍스트를 입력하라는 프롬프트가 나타납니다.": "명령어 실행 시 네임스페이스,\n                      키, 기본 텍스트를 입력하라는 프롬프트가 나타납니다.",
  "문서 보기": "문서 보기",
  "번역 데이터를 JSON 파일로\n                분리하여 관리하면 i18nexus-cli와의 통합이 용이하고, 번역 관리가\n                효율적입니다.": "번역 데이터를 JSON 파일로\n                분리하여 관리하면 i18nexus-cli와의 통합이 용이하고, 번역 관리가\n                효율적입니다.",
  "번역 문자열과 모든 번역을 삭제합니다.": "번역 문자열과 모든 번역을 삭제합니다.",
  "번역 작업": "번역 작업",
  "번역 키 삭제": "번역 키 삭제",
  "번역 키 수정": "번역 키 수정",
  "번역 파일 생성": "번역 파일 생성",
  "번역 함수 사용": "번역 함수 사용",
  "불필요한 재렌더링 방지 및 상태 관리 최적화": "불필요한 재렌더링 방지 및 상태 관리 최적화",
  "사용 가이드": "사용 가이드",
  "사용 예시:": "사용 예시:",
  "새 번역 키 추가": "새 번역 키 추가",
  "설계 원칙": "설계 원칙",
  "설치부터 고급 사용법까지": "설치부터 고급 사용법까지",
  "성능 최적화": "성능 최적화",
  "시스템 아키텍처": "시스템 아키텍처",
  "시작하기": "시작하기",
  "실시간 감지 (선택)": "실시간 감지 (선택)",
  "실시간 동기화": "실시간 동기화",
  "아키텍처": "아키텍처",
  "아키텍처 및 원칙": "아키텍처 및 원칙",
  "언어 전환 컴포넌트": "언어 전환 컴포넌트",
  "왜 i18nexus인가?": "왜 i18nexus인가?",
  "워크플로우": "워크플로우",
  "원활한 i18n 통합을 위한 React 컴포넌트와 훅": "원활한 i18n 통합을 위한 React 컴포넌트와 훅",
  "으로 구글 시트 변경사항 실시간 반영": "으로 구글 시트 변경사항 실시간 반영",
  "이 작업은 되돌릴 수 없습니다.\n                      모든 언어의 번역이 삭제됩니다.": "이 작업은 되돌릴 수 없습니다.\n                      모든 언어의 번역이 삭제됩니다.",
  "자동 코드 변환 및 번역 관리": "자동 코드 변환 및 번역 관리",
  "자동 코드 변환과 구글 시트 연동으로 국제화를 단순화하는 완전한 React i18n 툴킷입니다.": "자동 코드 변환과 구글 시트 연동으로 국제화를 단순화하는 완전한 React i18n 툴킷입니다.",
  "자동화 우선 접근법과 개발자 친화적 도구로 기존 i18n 라이브러리의 복잡성을 해결합니다.": "자동화 우선 접근법과 개발자 친화적 도구로 기존 i18n 라이브러리의 복잡성을 해결합니다.",
  "자동화 지향": "자동화 지향",
  "자동화된 코드 변환 및 번역 관리": "자동화된 코드 변환 및 번역 관리",
  "주의:": "주의:",
  "중요:": "중요:",
  "참고:": "참고:",
  "최소한의 설정으로 최대한의 기능 제공": "최소한의 설정으로 최대한의 기능 제공",
  "코드 작성": "코드 작성",
  "코딩부터 배포까지의 완전한 개발 워크플로우": "코딩부터 배포까지의 완전한 개발 워크플로우",
  "클라이언트 라이브러리": "클라이언트 라이브러리",
  "클라이언트 라이브러리 (React 컴포넌트, 훅 등)": "클라이언트 라이브러리 (React 컴포넌트, 훅 등)",
  "패키지 구조": "패키지 구조",
  "패키지 설치": "패키지 설치",
  "프로젝트에 새로운 번역 문자열을 추가합니다.": "프로젝트에 새로운 번역 문자열을 추가합니다.",
  "플러그인 아키텍처로 기능 확장 가능": "플러그인 아키텍처로 기능 확장 가능",
  "한국어": "한국어",
  "한국어를 키로 사용하여 환영합니다 형태로 코드 작성": "한국어를 키로 사용하여 환영합니다 형태로 코드 작성",
  "핵심 컴포넌트": "핵심 컴포넌트",
  "현대적 원칙으로 구축되고 확장성과 유지보수성을 위해 설계되었습니다.": "현대적 원칙으로 구축되고 확장성과 유지보수성을 위해 설계되었습니다.",
  "홈": "홈",
  "확장성": "확장성",
  "환영합니다": "환영합니다",
  "💡 Try switching languages - the selection is saved in cookies!": "💡 Try switching languages - the selection is saved in cookies!",
  "📁 디렉토리 구조": "📁 디렉토리 구조",
  "📦 설치": "📦 설치",
  "🔄 권장 워크플로우": "🔄 권장 워크플로우",
  "🔍 Starting translation key extraction...\n📂 Found 8 files to analyze\n🔑 Found 94 unique translation keys\n\n📊 en.json - Added 11 new keys:\n   + \"새로운 키 1\"\n   + \"새로운 키 2\"\n\n✓ en.json - Preserved 83 existing translations\n\n📝 en.json: 94 total keys (11 new, 83 existing)\n📝 ko.json: 94 total keys (85 new, 9 existing)": "🔍 Starting translation key extraction...\n📂 Found 8 files to analyze\n🔑 Found 94 unique translation keys\n\n📊 en.json - Added 11 new keys:\n   + \"새로운 키 1\"\n   + \"새로운 키 2\"\n\n✓ en.json - Preserved 83 existing translations\n\n📝 en.json: 94 total keys (11 new, 83 existing)\n📝 ko.json: 94 total keys (85 new, 9 existing)",
  "🛠️ 주요 명령어": "🛠️ 주요 명령어"
}